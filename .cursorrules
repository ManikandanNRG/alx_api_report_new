# ALX Report API Development Rules

## Project Context
This is a Moodle plugin (local_alx_report_api) that provides API endpoints for course progress reporting with advanced sync intelligence.

## Code Standards

### PHP Standards
- Follow Moodle coding standards
- Use proper PHPDoc comments for all functions
- Always check if database tables exist before querying: `$DB->get_manager()->table_exists('table_name')`
- Use Moodle's $DB methods instead of raw SQL when possible

### Service Name Handling
- Always check for both service names: 'alx_report_api_custom' (primary) and 'alx_report_api' (fallback)
- Pattern to use:
```php
$service = $DB->get_record('external_services', ['shortname' => 'alx_report_api_custom']);
if (!$service) {
    $service = $DB->get_record('external_services', ['shortname' => 'alx_report_api']);
}
```

### Database Field Compatibility
- Check for field existence before using: `$table_info = $DB->get_columns('table_name')`
- Use timeaccessed field if available, fallback to timecreated
- Use company_shortname field if available, fallback to companyid

### Error Handling
- Always wrap database operations in try-catch blocks
- Log errors using error_log() for debugging
- Provide fallback values for failed operations
- Return meaningful error messages in API responses

### Security
- Validate all API tokens using local_alx_report_api_validate_token()
- Check rate limits for all API calls
- Log authentication attempts
- Sanitize all user inputs

### Performance
- Use caching where appropriate (local_alx_api_cache table)
- Implement pagination for large datasets
- Use prepared statements for complex queries
- Monitor and log performance metrics

## File Structure Rules

### lib.php
- Contains all core library functions
- Functions should be prefixed with 'local_alx_report_api_'
- Group related functions together with clear comments

### control_center.php
- Main dashboard interface
- Should use functions from lib.php, not inline database queries
- Implement proper error handling for display

### externallib.php
- API endpoint implementations
- All functions must validate tokens and permissions
- Implement proper sync intelligence logic

## Testing Requirements
- Test with actual tokens and realistic data
- Verify both service names work correctly
- Test error conditions and recovery
- Validate performance under load

## Documentation
- Update inline comments when changing logic
- Maintain API documentation
- Keep sync intelligence documentation current 